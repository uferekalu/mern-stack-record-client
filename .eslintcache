[{"C:\\Users\\kalu\\mern-stack-record\\client\\src\\index.js":"1","C:\\Users\\kalu\\mern-stack-record\\client\\src\\App.js":"2","C:\\Users\\kalu\\mern-stack-record\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\store.js":"4","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\Navbar.js":"5","C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\home.js":"6","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\types.js":"7","C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\login.js":"8","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\actions\\userActions.js":"9","C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\signup.js":"10","C:\\Users\\kalu\\mern-stack-record\\client\\src\\util\\AuthRoute.js":"11","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PageHeader.js":"12","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\dataReducer.js":"13","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\userReducer.js":"14","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\uiReducer.js":"15","C:\\Users\\kalu\\mern-stack-record\\client\\src\\services.js":"16","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Controls.js":"17","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PostData.js":"18","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\ActionButton.js":"19","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Button.js":"20","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Input.js":"21","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Select.js":"22","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\Result.js":"23","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PostDataForm.js":"24","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Popup.js":"25","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\ConfirmDialog.js":"26","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\actions\\api.js":"27"},{"size":435,"mtime":1612160894442,"results":"28","hashOfConfig":"29"},{"size":2119,"mtime":1612160844932,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1606335808460,"results":"31","hashOfConfig":"29"},{"size":671,"mtime":1612069873902,"results":"32","hashOfConfig":"29"},{"size":1591,"mtime":1612126454090,"results":"33","hashOfConfig":"29"},{"size":1698,"mtime":1612053120740,"results":"34","hashOfConfig":"29"},{"size":452,"mtime":1612332195691,"results":"35","hashOfConfig":"29"},{"size":5295,"mtime":1612078852666,"results":"36","hashOfConfig":"29"},{"size":2840,"mtime":1612500719889,"results":"37","hashOfConfig":"29"},{"size":8861,"mtime":1612318192985,"results":"38","hashOfConfig":"29"},{"size":592,"mtime":1612124114735,"results":"39","hashOfConfig":"29"},{"size":1522,"mtime":1612052312802,"results":"40","hashOfConfig":"29"},{"size":0,"mtime":1612069221454,"results":"41","hashOfConfig":"29"},{"size":1181,"mtime":1612500425358,"results":"42","hashOfConfig":"29"},{"size":712,"mtime":1612074312502,"results":"43","hashOfConfig":"29"},{"size":550,"mtime":1612015126301,"results":"44","hashOfConfig":"29"},{"size":224,"mtime":1612134985958,"results":"45","hashOfConfig":"29"},{"size":16467,"mtime":1612503302469,"results":"46","hashOfConfig":"29"},{"size":898,"mtime":1612134868801,"results":"47","hashOfConfig":"29"},{"size":788,"mtime":1612168415533,"results":"48","hashOfConfig":"29"},{"size":737,"mtime":1612171428099,"results":"49","hashOfConfig":"29"},{"size":1273,"mtime":1612171022743,"results":"50","hashOfConfig":"29"},{"size":8243,"mtime":1612160347624,"results":"51","hashOfConfig":"29"},{"size":8099,"mtime":1612330233847,"results":"52","hashOfConfig":"29"},{"size":1635,"mtime":1612129265216,"results":"53","hashOfConfig":"29"},{"size":2296,"mtime":1612162742295,"results":"54","hashOfConfig":"29"},{"size":533,"mtime":1612166450144,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"13lvlkb",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},"C:\\Users\\kalu\\mern-stack-record\\client\\src\\index.js",[],["120","121"],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\App.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\reportWebVitals.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\store.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\Navbar.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\home.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\types.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\login.js",["122","123","124"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { \r\n    withStyles, \r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport PropTypes from 'prop-types';\r\nimport AppIcon from '../images/icon.jpg'\r\nimport { Controls } from '../components/controls/Controls';\r\n// Redux stuff\r\nimport { connect } from 'react-redux'\r\nimport { loginUser } from '../redux/actions/userActions';\r\n\r\n\r\nconst styles = theme => ({\r\n    \r\n  form: {\r\n    textAlign: 'center'\r\n  },\r\n  img: {\r\n      margin: '20px auto 20px auto',\r\n      width: '40px',\r\n      height: '40px'\r\n  },\r\n  pageTitle: {\r\n      marginTop: '16px',\r\n      marginBottom: '32px'\r\n  },\r\n  customError: {\r\n      color: 'red',\r\n      fontSize: '.8rem',\r\n  },\r\n  signUpLink: {\r\n      marginTop: '32px'\r\n  },\r\n  button: {\r\n      position: 'relative'\r\n  },\r\n  progress: {\r\n      position: 'absolute'\r\n  }\r\n})\r\n\r\nclass login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.UI.errors) {\r\n            this.setState({\r\n                errors: nextProps.UI.errors\r\n            });\r\n        }\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const data = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        }\r\n        this.props.loginUser(data, this.props.history);\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { classes, UI: { loading } } = this.props;\r\n        const { errors } = this.state;\r\n        return (\r\n            <Grid container className={classes.form}>\r\n                <Grid item sm/>\r\n                <Grid item sm>\r\n                    <img src={AppIcon} alt=\"App image\" className={classes.img} />\r\n                    <Typography variant=\"h5\" className={classes.pageTitle}>\r\n                        Login\r\n                    </Typography>\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <div className={classes.formContent}>\r\n                            <Controls.Input\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                label=\"Email\"\r\n                                fullWidth\r\n                                value={this.state.email}\r\n                                onChange={this.handleInput}\r\n                                error={errors.email}\r\n                                fullWidth\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"password\"\r\n                                variant=\"outlined\"\r\n                                label=\"Password\"\r\n                                fullWidth\r\n                                value={this.state.password}\r\n                                onChange={this.handleInput}\r\n                                error={errors.password}\r\n                                fullWidth\r\n                                type=\"password\"\r\n                            />\r\n                            {errors.emailnotfound && (\r\n                                <Typography variant=\"body2\" className={classes.customError}>\r\n                                    {errors.emailnotfound}\r\n                                </Typography>\r\n                            )}\r\n                            {errors.passwordincorrect && (\r\n                                <Typography variant=\"body2\" className={classes.customError}>\r\n                                    {errors.passwordincorrect}\r\n                                </Typography>\r\n                            )}\r\n                            <Controls.Button \r\n                                type=\"submit\"\r\n                                text=\"Login\"\r\n                                fullWidth\r\n                                className={classes.button}\r\n                                disabled={loading}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress size={10} className={classes.progress} />\r\n                                )}\r\n                            </Controls.Button>\r\n                            <Typography className={classes.signUpLink}>Don't have an account ? sign up <Link to=\"/signup\">here</Link></Typography>\r\n                        </div>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item sm/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nlogin.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    loginUser: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n    UI: state.UI\r\n});\r\n\r\nconst mapActionsToProps = {\r\n    loginUser\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(login))\r\n","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\actions\\userActions.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\pages\\signup.js",["125","126","127","128","129"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { \r\n    withStyles, \r\n    Grid,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport PropTypes from 'prop-types';\r\nimport AppIcon from '../images/icon.jpg'\r\nimport { Controls } from '../components/controls/Controls';\r\nimport * as services from '../services';\r\n// Redux stuff\r\nimport { connect } from 'react-redux';\r\nimport { signupUser } from '../redux/actions/userActions'\r\n\r\nconst styles = theme => ({ \r\n  form: {\r\n    textAlign: 'center'\r\n  },\r\n  img: {\r\n      margin: '20px auto 20px auto',\r\n      width: '40px',\r\n      height: '40px'\r\n  },\r\n  pageTitle: {\r\n      marginTop: '16px',\r\n      marginBottom: '32px'\r\n  },\r\n  customError: {\r\n      color: 'red',\r\n      fontSize: '.8rem',\r\n  },\r\n  signUpLink: {\r\n      marginTop: '32px'\r\n  },\r\n  button: {\r\n      position: 'relative'\r\n  },\r\n  progress: {\r\n      position: 'absolute'\r\n  },\r\n  div: {\r\n      marginBottom: theme.spacing(10)\r\n  }\r\n})\r\n\r\nclass signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            textarea: '',\r\n            dept: '',\r\n            courses: [],\r\n            panel:'',\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.UI.errors) {\r\n            this.setState({\r\n                errors: nextProps.UI.errors\r\n            });\r\n        }\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const newUserData = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            password2: this.state.password2,\r\n            textarea: this.state.textarea,\r\n            dept: this.state.dept,\r\n            panel: this.state.panel,\r\n            courses: this.state.courses,\r\n        }\r\n\r\n        this.props.signupUser(newUserData, this.props.history)\r\n\r\n    }\r\n\r\n    handleInput = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { classes, UI: { loading } } = this.props;\r\n        const { errors } = this.state;\r\n        return (\r\n            <Grid container className={classes.form}>\r\n                <Grid item sm/>\r\n                <Grid item sm>\r\n                    <img src={AppIcon} alt=\"App image\" className={classes.img} />\r\n                    <Typography variant=\"h5\" className={classes.pageTitle}>\r\n                        Sign Up\r\n                    </Typography>\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <div className={classes.formContent}>\r\n                            <Controls.Input\r\n                                name=\"name\"\r\n                                variant=\"outlined\"\r\n                                label=\"Name\"\r\n                                fullWidth\r\n                                value={this.state.name}\r\n                                onChange={this.handleInput}\r\n                                error={errors.name}\r\n                                fullWidth\r\n                                type=\"text\"\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"email\"\r\n                                variant=\"outlined\"\r\n                                label=\"Email\"\r\n                                fullWidth\r\n                                value={this.state.email}\r\n                                onChange={this.handleInput}\r\n                                error={errors.email}\r\n                                fullWidth\r\n                                type=\"text\"\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"password\"\r\n                                variant=\"outlined\"\r\n                                label=\"Password\"\r\n                                fullWidth\r\n                                value={this.state.password}\r\n                                onChange={this.handleInput}\r\n                                error={errors.password}\r\n                                fullWidth\r\n                                type=\"password\"\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"password2\"\r\n                                variant=\"outlined\"\r\n                                label=\"Confirm Password\"\r\n                                fullWidth\r\n                                value={this.state.password2}\r\n                                onChange={this.handleInput}\r\n                                error={errors.password2}\r\n                                fullWidth\r\n                                type=\"password\"\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"textarea\"\r\n                                variant=\"outlined\"\r\n                                label=\"Textarea\"\r\n                                fullWidth\r\n                                multiline\r\n                                rows={7}\r\n                                value={this.state.textarea}\r\n                                onChange={this.handleInput}\r\n                                error={errors.textarea}\r\n                                type=\"text\"\r\n                            />\r\n                            <Controls.Input\r\n                                name=\"panel\"\r\n                                variant=\"outlined\"\r\n                                label=\"Panel Name\"\r\n                                fullWidth\r\n                                value={this.state.panel}\r\n                                onChange={this.handleInput}\r\n                                error={errors.panel}\r\n                            />\r\n                            <Controls.Select \r\n                                name=\"dept\"\r\n                                label=\"Department\"\r\n                                value={this.state.dept}\r\n                                onChange={this.handleInput}\r\n                                options={services.getDepartmentCollection()}\r\n                                error={errors.dept}\r\n                            />\r\n                            <Controls.Select \r\n                                name=\"courses\"\r\n                                label=\"Courses\"\r\n                                value={this.state.courses}\r\n                                onChange={this.handleInput}\r\n                                options={services.getDepartmentCourses()}\r\n                                error={errors.courses}\r\n                                multiple={true} \r\n                            />\r\n                            {errors.emailnotfound && (\r\n                                <Typography variant=\"body2\" className={classes.customError}>\r\n                                    {errors.emailnotfound}\r\n                                </Typography>\r\n                            )}\r\n                            {errors.passwordincorrect && (\r\n                                <Typography variant=\"body2\" className={classes.customError}>\r\n                                    {errors.passwordincorrect}\r\n                                </Typography>\r\n                            )}\r\n                            <Controls.Button \r\n                                type=\"submit\"\r\n                                text=\"Sign Up\"\r\n                                fullWidth\r\n                                className={classes.button}\r\n                                disabled={loading}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress size={10} className={classes.progress} />\r\n                                )}\r\n                            </Controls.Button>\r\n                            <Typography className={classes.signUpLink}>Already have an account ? login <Link to=\"/login\">here</Link></Typography>\r\n                            <div className={classes.div}></div>\r\n                        </div>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item sm/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nsignup.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired,\r\n    signupUser: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n    UI: state.UI\r\n})\r\n\r\nexport default connect(mapStateToProps, { signupUser })(withStyles(styles)(signup))\r\n","C:\\Users\\kalu\\mern-stack-record\\client\\src\\util\\AuthRoute.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PageHeader.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\dataReducer.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\userReducer.js",["130"],"import { \r\n    SET_USER, \r\n    SET_AUTHENTICATED, \r\n    SET_UNAUTHENTICATED, \r\n    DELETE_USER,\r\n    FILTER_BY_NAME \r\n} from '../types';\r\n\r\nconst initialState = {\r\n    authenticated: false,\r\n    list: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type){\r\n        case SET_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                authenticated: true\r\n            }\r\n        case SET_UNAUTHENTICATED:\r\n            return initialState\r\n        case SET_USER:\r\n            return {\r\n                authenticated: true,\r\n                list: [...action.payload]\r\n            };\r\n        case DELETE_USER:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(x => x._id !== action.payload)\r\n            };\r\n        case FILTER_BY_NAME: \r\n            let value = action.payload.value\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(item => {\r\n                    return item.name.toLowerCase().includes(value) || item.dept.toLowerCase().includes(value)\r\n                })\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\reducers\\uiReducer.js",["131"],"import { SET_ERRORS, CLEAR_ERRORS, LOADING_UI } from '../types';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    errors: null\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type){\r\n        case SET_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: action.payload\r\n            }\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: null\r\n            }\r\n        case LOADING_UI:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\kalu\\mern-stack-record\\client\\src\\services.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Controls.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PostData.js",["132","133","134","135"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/actions/userActions';\r\nimport { \r\n    Grid, \r\n    Paper, \r\n    withStyles, \r\n    Typography,\r\n    Button,\r\n    Toolbar,\r\n    InputAdornment,\r\n    TableBody\r\n} from '@material-ui/core';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport PostDataForm from './PostDataForm';\r\nimport ButterToast, { Cinnamon } from 'butter-toast';\r\nimport { DeleteSweep, Search } from '@material-ui/icons';\r\nimport { Controls } from './controls/Controls';\r\nimport Popup from './controls/Popup';\r\nimport ConfirmDialog from './ConfirmDialog';\r\nimport { TableRow } from '@material-ui/core';\r\nimport { TableCell } from '@material-ui/core';\r\nimport { TableHead } from '@material-ui/core';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        margin: theme.spacing(3),\r\n        padding: theme.spacing(2),\r\n    },\r\n    textarea: {\r\n        textAlign: \"justify\",\r\n        paddingTop: theme.spacing(3),\r\n        fontSize: '.8rem'\r\n    },\r\n    dept: {\r\n        fontSize: '.8rem',\r\n    },\r\n    span: {\r\n        fontSize: '14px',\r\n        color: \"green\",\r\n        marginRight: \"100px\"\r\n    },\r\n    detail: {\r\n        fontSize: '12px',\r\n        color: 'green',\r\n        marginRight: '150px'\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1)\r\n    },\r\n    actionDiv: {\r\n        textAlign: \"center\"\r\n    },\r\n    searchInput: {\r\n        width: '45%',\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n        '@media screen and (max-width: 600px)':{\r\n            width: '100%'\r\n        }\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        top: '-2px',\r\n        right: '10px',\r\n        width:'45%',\r\n        marginButtom: theme.spacing(15),\r\n        height: theme.spacing(7),\r\n        '@media screen and (max-width: 600px)':{\r\n            width: '92%',\r\n            marginTop: theme.spacing(12)\r\n        }\r\n    },\r\n    coursesRegistered: {\r\n        fontSize: '.6rem'\r\n    },\r\n    tableCell: {\r\n        textTransform: 'uppercase',\r\n        fontWeight: 'bold'\r\n    },\r\n    amountDetail: {\r\n        fontSize: '.8rem',\r\n        fontWeight: 'bold',\r\n        textTransform: 'uppercase'\r\n    },\r\n    intro: {\r\n        fontSize: '.8rem',\r\n        padding: theme.spacing(2),\r\n        textAlign: \"justify\",\r\n    },\r\n    accordion: {\r\n        '@media screen and (max-width: 600px)':{\r\n            marginTop: theme.spacing(12)\r\n        }\r\n    }\r\n})\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n      border: '1px solid rgba(0, 0, 0, .125)',\r\n      boxShadow: 'none',\r\n      marginTop: '2rem',\r\n      '&:not(:last-child)': {\r\n        borderBottom: 0,\r\n      },\r\n      '&:before': {\r\n        display: 'none',\r\n      },\r\n      '&$expanded': {\r\n        margin: 'auto',\r\n      },\r\n      '@media screen and (max-width: 600px)':{\r\n        marginTop: '30px'\r\n    }\r\n    },\r\n    expanded: {},\r\n  })(MuiAccordion);\r\n  \r\n  const AccordionSummary = withStyles({\r\n    root: {\r\n      backgroundColor: 'rgba(0, 0, 0, .03)',\r\n      marginBottom: -1,\r\n      minHeight: 56,\r\n      '&$expanded': {\r\n        minHeight: 56,\r\n        color: \"white\",\r\n        textTransform: 'uppercase',\r\n        backgroundColor: \"black\",\r\n        fontSize: '.7rem'\r\n      },\r\n    },\r\n    content: {\r\n      '&$expanded': {\r\n        margin: '12px 0',\r\n      },\r\n    },\r\n    expanded: {},\r\n  })(MuiAccordionSummary);\r\n  \r\n  const AccordionDetails = withStyles((theme) => ({\r\n    root: {\r\n      paddingLeft: theme.spacing(2),\r\n      marginTop: theme.spacing(0),\r\n      backgroundColor: \"lightblue\"\r\n    },\r\n  }))(MuiAccordionDetails);\r\n\r\n\r\nconst PostData = ({classes, ...props}) => {\r\n    const [expanded, setExpanded] = useState();\r\n    const [currentId, setCurrentId] = useState(0)\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n\r\n    const handleChange = (panel) => (event, newExpanded) => {\r\n        setExpanded(newExpanded ? panel : false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        props.fetchAllPostData()\r\n    }, [])\r\n\r\n    const onDelete = id => {\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n\r\n        const onSuccess = () => { \r\n            ButterToast.raise({\r\n                content: <Cinnamon.Crisp title=\"Post Box\"\r\n                    content = \"Deleted sucessfully\"\r\n                    scheme = {Cinnamon.Crisp.SCHEME_PURPLE}\r\n                    icon = {<DeleteSweep />}\r\n                />\r\n            })\r\n        }\r\n\r\n        props.deletePostData(id, onSuccess)\r\n    }\r\n\r\n    const openInPopup = record => {\r\n        setCurrentId(record._id)\r\n        setOpenPopup(true)\r\n    }\r\n\r\n    const filterByInput = (e) => {\r\n        let input = e.target.value;\r\n        props.filterPostData({value: input})\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                            <Typography className={classes.intro}>\r\n                                This Demo App uses MongoDB to store records of students who registered for tutorial courses on various departments of their choosing.\r\n                              {props.authenticated ? 'With login system' : <Link to={`/login`}>With login system</Link> }, one can add some records and be redirected to home page where they would have access to their profile page. \r\n                                The profile page is still being developed.\r\n                                Accordions are used to show the message describing a little about them, their departments, the number of courses registered\r\n                                and the total amount.\r\n                            </Typography>\r\n                        <Toolbar>\r\n                            {\r\n                                props.authenticated && (\r\n                                    <>\r\n                                        <Controls.Input\r\n                                            className={classes.searchInput}\r\n                                            label=\"Search by name\"\r\n                                                InputProps ={{\r\n                                                    startAdornment:(<InputAdornment position=\"start\">\r\n                                                        <Search />\r\n                                                    </InputAdornment>)\r\n                                                }}\r\n                                            onChange={e => {filterByInput(e)}}\r\n                                        />\r\n                                        <Controls.Button\r\n                                            text=\"Add New\"\r\n                                            variant=\"outlined\"\r\n                                            className={classes.newButton}\r\n                                            startIcon={<AddIcon />}\r\n                                            onClick={() => {setOpenPopup(true); setCurrentId(0) }}\r\n                                        />\r\n                                    </>\r\n                                )\r\n                            }\r\n                            \r\n                        </Toolbar>\r\n                        <div className={`${classes.root} ${classes.accordion}`}>\r\n                            {\r\n                                props.user.map((record, index) => {\r\n                                    return (\r\n                                        <Accordion square expanded={expanded === record.panel} onChange={handleChange(record.panel)} key={index}>\r\n                                            <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\r\n                                                <Typography>{record.name}'s Detail</Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                <Typography className={classes.textarea}>\r\n                                                    {record.textarea}\r\n                                                </Typography>\r\n                                            </AccordionDetails>\r\n                                            <AccordionDetails>\r\n                                                <Typography\r\n                                                className={classes.dept}>Department:  {record.dept}\r\n                                                </Typography>\r\n                                            </AccordionDetails>\r\n                                            <AccordionDetails>\r\n                                                <Typography className={classes.coursesRegistered}>\r\n                                                    <TableHead>\r\n                                                        <TableRow>\r\n                                                            <TableCell className={classes.tableCell}>\r\n                                                                Name of the course\r\n                                                            </TableCell>\r\n                                                            <TableCell className={classes.tableCell}>\r\n                                                                Amount\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </TableHead>\r\n                                                    <TableBody>\r\n                                                        {\r\n                                                            record.courses.map((item, index) =>{\r\n                                                                return (\r\n                                                                    <TableRow key={index}>\r\n                                                                        <TableCell>{item}</TableCell>\r\n                                                                        <TableCell>2000</TableCell>\r\n                                                                    </TableRow>\r\n                                                                    \r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </TableBody>\r\n                                                </Typography>\r\n                                            </AccordionDetails>\r\n                                            <AccordionDetails>\r\n                                                <Typography>\r\n                                                    <TableBody>\r\n                                                        <TableRow>\r\n                                                            <TableCell className={classes.amountDetail}>\r\n                                                                Total amount:\r\n                                                            </TableCell>\r\n                                                            <TableCell className={classes.amountDetail}>\r\n                                                                #{record.courses.length * 2000}\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </TableBody>\r\n                                                </Typography>\r\n                                            </AccordionDetails>\r\n                                            {/* {\r\n                                                props.authenticated && (\r\n                                                    <div className={classes.actionDiv}>\r\n                                                            <>\r\n                                                                <Button \r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"primary\"\r\n                                                                    size=\"small\"\r\n                                                                    className={classes.smMargin}\r\n                                                                    onClick={() => {openInPopup(record)}}\r\n                                                                >\r\n                                                                    Edit\r\n                                                                </Button>\r\n                                                                <Button \r\n                                                                    variant=\"contained\"\r\n                                                                    color=\"secondary\"\r\n                                                                    size=\"small\"\r\n                                                                    className={classes.smMargin}\r\n                                                                    onClick={() => {\r\n                                                                        setConfirmDialog({\r\n                                                                            isOpen: true,\r\n                                                                            title: 'Are you sure to delete this record?',\r\n                                                                            subTitle: \"You can't undo this operation\",\r\n                                                                            onConfirm: () => {onDelete(record._id)}\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                    Delete\r\n                                                                </Button>\r\n                                                            </>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            } */}\r\n                                        </Accordion>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Paper>\r\n                </Grid>\r\n                <Popup\r\n                    title=\"Students Tutorial Form\"\r\n                    openPopup={openPopup}\r\n                    setOpenPopup={setOpenPopup}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Paper className={classes.paper}>\r\n                            <PostDataForm \r\n                                {...{currentId, setCurrentId}} \r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                </Popup>\r\n                <ConfirmDialog\r\n                    confirmDialog={confirmDialog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nPostData.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired,\r\n    getUserData: PropTypes.func.isRequired,\r\n    Delete: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.user.list,\r\n    authenticated: state.user.authenticated,\r\n    UI: state.UI\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllPostData: actions.getUserData,\r\n    deletePostData: actions.Delete,\r\n    filterPostData: actions.filterByName\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles, Accordion, AccordionSummary, AccordionDetails)(PostData));","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\ActionButton.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Button.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Input.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Select.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\Result.js",[],["136","137"],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\PostDataForm.js",["138","139","140","141","142","143","144"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { connect } from 'react-redux';\r\nimport ButterToast, { Cinnamon } from 'butter-toast';\r\nimport { AssignmentTurnedIn } from '@material-ui/icons';\r\nimport * as services from '../services';\r\nimport { Controls } from './controls/Controls';\r\nimport * as actions from '../redux/actions/userActions';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1)\r\n        },\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center'\r\n    },\r\n    postBtn: {\r\n        width: \"50%\"\r\n    },\r\n    button: {\r\n        width: '40%',\r\n        margin: 'auto',\r\n        marginLeft: theme.spacing(5),\r\n        '@media screen and (max-width: 600px)': {\r\n            width: '100%',\r\n            margin: 'auto',\r\n            marginBottom: theme.spacing(2),\r\n            marginTop: theme.spacing(3),\r\n        }\r\n    }\r\n})\r\n\r\nconst initialFieldValues = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    password2: '',\r\n    textarea: '',\r\n    dept: '',\r\n    courses: [],\r\n    panel: ''\r\n}\r\n\r\nconst PostDataForm = ({ classes, ...props }) => {\r\n    const { UI: { loading } } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [currentId, setCurrentId] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (props.currentId !== 0){\r\n            setValues({\r\n                ...props.user.find(x => x._id === props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n        if (props.UI.errors) {\r\n            setErrors(props.UI.errors)\r\n        }\r\n    }, [props.currentId, props.UI.errors])\r\n\r\n\r\n    const handleInput = (event) => {\r\n        const { name, value } = event.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValues(initialFieldValues)\r\n        setErrors({})\r\n        setCurrentId(0)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const onSuccess = () => { \r\n            ButterToast.raise({\r\n                content: <Cinnamon.Crisp title=\"Post Box\"\r\n                    content = \"Submitted sucessfully\"\r\n                    scheme = {Cinnamon.Crisp.SCHEME_PURPLE}\r\n                    icon = {<AssignmentTurnedIn />}\r\n                />\r\n            })\r\n            resetForm()\r\n            setOpenPopup(false)\r\n        }\r\n\r\n        const onSuccessUpdate = () => { \r\n            ButterToast.raise({\r\n                content: <Cinnamon.Crisp title=\"Post Box\"\r\n                    content = \"Updated sucessfully\"\r\n                    scheme = {Cinnamon.Crisp.SCHEME_PURPLE}\r\n                    icon = {<AssignmentTurnedIn />}\r\n                />\r\n            })\r\n            resetForm()\r\n            setOpenPopup(false)\r\n        }\r\n\r\n        if (props.currentId === 0)\r\n            props.createPostData(values, props.history, onSuccess)\r\n        else\r\n            props.updatePostData(props.currentId, values, onSuccessUpdate, props.history)\r\n    \r\n    }\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n            <div className={classes.formContent}>\r\n                <Controls.Input\r\n                    name=\"name\"\r\n                    variant=\"outlined\"\r\n                    label=\"Name\"\r\n                    fullWidth\r\n                    value={values.name}\r\n                    onChange={handleInput}\r\n                    error={errors.name}\r\n                    fullWidth\r\n                    type=\"text\"\r\n                />\r\n                <Controls.Input\r\n                    name=\"email\"\r\n                    variant=\"outlined\"\r\n                    label=\"Email\"\r\n                    fullWidth\r\n                    value={values.email}\r\n                    onChange={handleInput}\r\n                    error={errors.email}\r\n                    fullWidth\r\n                    type=\"text\"\r\n                />\r\n                <Controls.Input\r\n                    name=\"password\"\r\n                    variant=\"outlined\"\r\n                    label=\"Password\"\r\n                    fullWidth\r\n                    value={values.password}\r\n                    onChange={handleInput}\r\n                    error={errors.password}\r\n                    fullWidth\r\n                    type=\"password\"\r\n                />\r\n                <Controls.Input\r\n                    name=\"password2\"\r\n                    variant=\"outlined\"\r\n                    label=\"Confirm Password\"\r\n                    fullWidth\r\n                    value={values.password2}\r\n                    onChange={handleInput}\r\n                    error={errors.password2}\r\n                    fullWidth\r\n                    type=\"password\"\r\n                />\r\n                <Controls.Input\r\n                    name=\"textarea\"\r\n                    variant=\"outlined\"\r\n                    label=\"Textarea\"\r\n                    fullWidth\r\n                    multiline\r\n                    rows={7}\r\n                    value={values.textarea}\r\n                    onChange={handleInput}\r\n                    error={errors.textarea}\r\n                    type=\"text\"\r\n                />\r\n                <Controls.Input\r\n                    name=\"panel\"\r\n                    variant=\"outlined\"\r\n                    label=\"Panel Name\"\r\n                    fullWidth\r\n                    value={values.panel}\r\n                    onChange={handleInput}\r\n                    error={errors.panel}\r\n                />\r\n                <Controls.Select \r\n                    name=\"dept\"\r\n                    label=\"Department\"\r\n                    value={values.dept}\r\n                    onChange={handleInput}\r\n                    options={services.getDepartmentCollection()}\r\n                    error={errors.dept}\r\n                />\r\n                <Controls.Select \r\n                    name=\"courses\"\r\n                    label=\"Courses\"\r\n                    value={values.courses}\r\n                    onChange={handleInput}\r\n                    options={services.getDepartmentCourses()}\r\n                    error={errors.courses}\r\n                    multiple={true} \r\n                />\r\n                {errors.email && (\r\n                    <Typography variant=\"body2\" className={classes.customError}>\r\n                        {errors.email}\r\n                    </Typography>\r\n                )}\r\n                <Controls.Button \r\n                    type=\"submit\"\r\n                    text=\"Submit\"\r\n                    className={classes.button}\r\n                    disabled={loading}\r\n                >\r\n                </Controls.Button>\r\n                <Controls.Button \r\n                    type=\"submit\"\r\n                    text=\"Reset\"\r\n                    className={classes.button}\r\n                    disabled={loading}\r\n                    color=\"default\"\r\n                    onClick={resetForm}\r\n                >\r\n                    {loading && (\r\n                        <CircularProgress size={10} className={classes.progress} />\r\n                    )}\r\n                </Controls.Button>\r\n                <div className={classes.div}></div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nPostDataForm.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired,\r\n    signupUser: PropTypes.func.isRequired,\r\n    updateUser: PropTypes.func.isRequired,\r\n    \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user.list,\r\n    UI: state.UI\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createPostData: actions.signupUser,\r\n    updatePostData: actions.updateUser\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostDataForm));\r\n","C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\controls\\Popup.js",[],["145","146"],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\components\\ConfirmDialog.js",[],"C:\\Users\\kalu\\mern-stack-record\\client\\src\\redux\\actions\\api.js",["147"],"import axios from 'axios';\r\n\r\nconst baseUrl = 'http://localhost:4000/'\r\n\r\nexport default {\r\n    postResult(url=baseUrl+'postrecord/')\r\n    {\r\n        return {\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url+id),\r\n            create: newRecord => axios.post(url+'signup', newRecord),\r\n            login: record => axios.post(url+'login', record),\r\n            update: (id, updatedRecord) => axios.put(url+id, updatedRecord),\r\n            delete: id => axios.delete(url+id)\r\n        }\r\n    }\r\n}",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":89,"column":21,"nodeType":"154","endLine":89,"endColumn":82},{"ruleId":"155","severity":1,"message":"156","line":103,"column":33,"nodeType":"157","endLine":103,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":113,"column":33,"nodeType":"157","endLine":113,"endColumn":42},{"ruleId":"152","severity":1,"message":"153","line":105,"column":21,"nodeType":"154","endLine":105,"endColumn":82},{"ruleId":"155","severity":1,"message":"156","line":119,"column":33,"nodeType":"157","endLine":119,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":130,"column":33,"nodeType":"157","endLine":130,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":141,"column":33,"nodeType":"157","endLine":141,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":152,"column":33,"nodeType":"157","endLine":152,"endColumn":42},{"ruleId":"158","severity":1,"message":"159","line":14,"column":1,"nodeType":"160","endLine":44,"endColumn":2},{"ruleId":"158","severity":1,"message":"159","line":8,"column":1,"nodeType":"160","endLine":30,"endColumn":2},{"ruleId":"161","severity":1,"message":"162","line":9,"column":5,"nodeType":"163","messageId":"164","endLine":9,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":169,"column":8,"nodeType":"167","endLine":169,"endColumn":10,"suggestions":"168"},{"ruleId":"161","severity":1,"message":"169","line":171,"column":11,"nodeType":"163","messageId":"164","endLine":171,"endColumn":19},{"ruleId":"161","severity":1,"message":"170","line":190,"column":11,"nodeType":"163","messageId":"164","endLine":190,"endColumn":22},{"ruleId":"148","replacedBy":"171"},{"ruleId":"150","replacedBy":"172"},{"ruleId":"161","severity":1,"message":"173","line":54,"column":12,"nodeType":"163","messageId":"164","endLine":54,"endColumn":21},{"ruleId":"161","severity":1,"message":"174","line":55,"column":12,"nodeType":"163","messageId":"164","endLine":55,"endColumn":21},{"ruleId":"165","severity":1,"message":"175","line":67,"column":8,"nodeType":"167","endLine":67,"endColumn":42,"suggestions":"176"},{"ruleId":"155","severity":1,"message":"156","line":128,"column":21,"nodeType":"157","endLine":128,"endColumn":30},{"ruleId":"155","severity":1,"message":"156","line":139,"column":21,"nodeType":"157","endLine":139,"endColumn":30},{"ruleId":"155","severity":1,"message":"156","line":150,"column":21,"nodeType":"157","endLine":150,"endColumn":30},{"ruleId":"155","severity":1,"message":"156","line":161,"column":21,"nodeType":"157","endLine":161,"endColumn":30},{"ruleId":"148","replacedBy":"177"},{"ruleId":"150","replacedBy":"178"},{"ruleId":"158","severity":1,"message":"179","line":5,"column":1,"nodeType":"160","endLine":17,"endColumn":2},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["182"],"'onDelete' is assigned a value but never used.","'openInPopup' is assigned a value but never used.",["180"],["181"],"'openPopup' is assigned a value but never used.","'currentId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.user'. Either include it or remove the dependency array. If 'setValues' needs the current value of 'props.user', you can also switch to useReducer instead of useState and read 'props.user' in the reducer.",["183"],["180"],["181"],"Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [props]",{"range":"188","text":"189"},"Update the dependencies array to be: [props.currentId, props.UI.errors, props.user]",{"range":"190","text":"191"},[4408,4410],"[props]",[1905,1939],"[props.currentId, props.UI.errors, props.user]"]